'スタート版
'行ごと、列ごと　結合
'データが入っているセルのうち最も後ろのセルに格納されたデータは、行単位で見たとき何列目まで、列単位で見たとき何行目まで、使われているか。

Private Const MAX_COL As Long = 100  '列　タテ方向のセル　右へ 仮に20
Private Const MAX_ROW As Long = 100 '行　ヨコ方向のセル　下へ 仮に22

Sub Cell_count()
    MsgBox ("データが格納されたセルの末尾の" & vbCrLf & "列番号・行番号をお知らせ") 'vbCrLfはメッセージボックスの改行
    '★ヨコ方向のセルについて　末尾データの列の場所を求める
    MsgBox ("※セルを右に向かって見ています")
    MsgBox ("行の使用済みセル最大列番号を求めます")
    '*** データのあるセル範囲取得 開始*** ●
    ' シート名
    Dim csvSh As Worksheet
    Set csvSh = ThisWorkbook.Worksheets("Sheet1")  'シート番号 Sheet1など
    
    ' 行ごとのデータ数を格納する配列dataCountを初期化 *** ●●
    Dim dataCount() As Long
    '配列サイズを確定
    ReDim dataCount(1 To MAX_ROW) As Long
    
    ' 配列のループ
    ' 行の数 i
    Dim i As Long
    ' 1行から順にデータ数をカウント
    For i = 1 To MAX_ROW
        ' 各行の最終列を取得
        Dim lastCol As Long
        lastCol = csvSh.Cells(i, csvSh.Columns.Count).End(xlToLeft).column
        '*** 最終列を1と置く　これがないと先頭行データが空白のとき最終列として判断できない ***
        ' 先頭行データが設定されているかいないか
        If lastCol = 1 And IsEmpty(csvSh.Cells(i, 1).Value) Then '最終列が便宜上1列目 かつ 先頭列データが空白
            dataCount(i) = 0  '行のデータ数0とする
        Else
            ' データ数をカウント
            dataCount(i) = lastCol
        End If
    Next i
    
    '上記で作成した配列dataCountの中に格納されているデータの最大値を求める！ *** ●●●
    Dim max_retu As Long
    '「各行の使用済みセル列の末尾列」のセルに格納されている値の配列
    'step1 配列の先頭要素を最大値の初期値とする
    max_retu = dataCount(1)
    'step2 配列ループ
    'For i = 0 To (UBound(dataCount) - LBound(dataCount)) '配列の最大インデックス-配列の最小インデックス+1　これで配列要素数が求まる
    For i = LBound(dataCount) To UBound(dataCount)
        'step3 要素大小比較
        If dataCount(i) > max_retu Then
            'step4 配列の隣接2要素について　左の要素が右の要素より大きければ入れ替えて最大値に代入
            max_retu = dataCount(i)
        End If
    Next i
    MsgBox ("データが入っているセルの使用する列番号最大値は" & vbCrLf & max_retu & " です")  'vbCrLfはメッセージボックスの改行
    
    '--------------------------------------------------------------------------------
    '★タテ方向のセルについて　末尾データの行の場所を求める
    MsgBox ("つづきまして　列の使用済みセル最大行番号を求めます")
    MsgBox ("※セルを下に向かって見ています")
    '*** データのあるセル範囲取得 開始*** ●
    ' 列ごとのデータ数を格納する配列dataCountを再初期化 *** ●●
    '配列サイズを確定
    ReDim dataCount(1 To MAX_COL) As Long
    
    '配列のループ
    ' 列の数 j
    Dim j As Long
    ' 1列から順にデータ数をカウント
    For j = 1 To MAX_COL
        ' 各列の最終行を取得
        Dim lastRow As Long
        lastRow = csvSh.Cells(csvSh.Rows.Count, j).End(xlUp).Row
        '*** 最終行を1と置く　これがないと先頭列データが空白のとき最終行として判断できない ***
        ' 先頭列データが設定されているかいないか
        If lastRow = 1 And IsEmpty(csvSh.Cells(1, j).Value) Then '最終行が便宜上1行目 かつ 先頭行データが空白
            dataCount(j) = 0  '列のデータ数0とする
        Else
            ' データ数をカウント
            dataCount(j) = lastRow
        End If
    Next j
    
    '上記で作成した配列dataCountの中に格納されているデータの最大値を求める！ *** ●●●
    Dim max_gyou As Long
    '「各列の使用済みセル行の末尾行」のセルに格納されている値の配列
    'step1 配列の先頭要素を最大値の初期値とする
    max_gyou = dataCount(1)
    'step2 配列ループ
    'For j = 0 To (UBound(dataCount) - LBound(dataCount)) '配列の最大インデックス-配列の最小インデックス+1　これで配列要素数が求まる
    For j = LBound(dataCount) To UBound(dataCount)
        'step3 要素大小比較
        If dataCount(j) > max_gyou Then
            'step4 配列の隣接2要素について　左の要素が右の要素より大きければ入れ替えて最大値に代入
            max_gyou = dataCount(j)
        End If
    Next j
    MsgBox ("データが入っているセルの使用する行番号最大値は" & vbCrLf & max_gyou & " です") 'vbCrLfはメッセージボックスの改行
    
    '--------------------------------------------------------------------------------
    MsgBox ("シートCSV変換を開始します")
    '*** 書き込み工程 開始*** ◆◆◆
    Dim csvVal As String 'セル座標のデータをcsvValとして取得
    '使用済み行rowの数の取得　最大値1048576行から上の範囲
    'lastRow = csvSh.Cells(csvSh.Rows.Count, 1).End(xlUp).Row
    '使用済み列columnの数16384の取得 最大値XFD列から左の範囲
    'lastCol = csvSh.Cells(1, csvSh.Columns.Count).End(xlToLeft).column

     ' CSVファイルの保存先を指定
    Dim outputFile As String
    outputFile = "C:\Users\NEC-PCuser\Desktop\CSVFile.csv" '任意のディレクトリに変更

    ' 空ファイル番号を取得
    Dim csvNum As Long
    csvNum = FreeFile

    ' CSVファイルを書き込みモードで開く
    Open outputFile For Output As #csvNum
    ' 行方向要素数分ループ
    For i = 1 To max_gyou
        ' 列方向要素数分ループ
        For j = 1 To max_retu
            ' セルの値を配列から定義
            csvVal = csvSh.Cells(i, j).Value
            ' セルが空でない場合に値を書き込む
            If j = max_retu Then
                ' 最終列の場合、デフォルトで改行コードが付与
                Print #csvNum, csvVal
            Else
                ' 最終列でない場合、コンマ刻みで末尾にセミコロン付与
                Print #csvNum, csvVal & ",";
            End If
        Next j
    Next i

    ' ファイルを閉じる
    Close #csvNum

    MsgBox ("シートCSV変換 出力完了しました")
    '*** 書き込み工程 終了*** ◆◆◆
    
End Sub

'以下　解説
このVBAコードは、与えられたシート内のデータから行と列の末尾の位置を特定し、その位置情報をメッセージボックスに表示し、さらにデータをCSVファイルに変換する処理を行っています。
ここではコードの流れと主な変数の意味を説明します

データ数をカウントする処理:
dataCount() 配列: 行または列ごとのデータ数を保持するための配列です。
For ループを使って、行または列ごとにデータの数を数えます。
lastCol または lastRow 変数は、各行または各列の最後のセルの位置を示します。
IsEmpty() 関数はセルが空かどうかをチェックします。

最大値を見つける処理:
max_retu および max_gyou 変数は、それぞれ列の最大使用列番号と行の最大使用行番号を示します。
ループを使って dataCount() 配列の中から最大の値を見つけます。

CSVファイルへの書き込み処理:
csvVal 変数は、セルの値を保持します。
ファイルハンドル #csvNum を使ってファイルを開き、データをCSV形式で出力します。
データの書き込みには、Print ステートメントが使用されています。

メッセージボックス:
ユーザーに情報を提供するためのメッセージボックスがあります。
これらの処理を通じて、データの位置情報が特定され、それを使ってCSVファイルが生成されます。

'変数の意味
MAX_COL:列方向のセルの最大数を表す定数。
MAX_ROW:行方向のセルの最大数を表す定数。
csvSh:データを取得する対象のワークシートを表すオブジェクト。
dataCount():各行または列におけるデータの数を格納する配列。
インデックスが行または列を表し、その値がその行または列に含まれるデータの数を示します。
i:ループ処理中に行を示す変数。
lastCol:各行における最終列の列番号を示す変数。
max_retu:使用されている列の中で、最も大きな列番号を示す変数。
j:ループ処理中に列を示す変数。
lastRow:各列における最終行の行番号を示す変数。
max_gyou:使用されている行の中で、最も大きな行番号を示す変数。
csvVal:CSVファイルに書き込むセルの値を一時的に格納する変数。
outputFile:CSVファイルの保存先のパスを示す文字列型の変数。
csvNum:CSVファイルのファイル番号を示す変数。

'文章で解説
定数の定義:MAX_COLとMAX_ROWという2つの定数が定義されています。これらは、それぞれ列と行の最大数を示します。このプログラムでは、仮に100としていますが、必要に応じて変更できます。
Sub Cell_count() の開始:このサブルーチンは、データの処理を開始する部分です。メッセージボックスでユーザーに情報を提供し、処理の開始を通知します。
ヨコ方向のセルの処理:シートからデータを取得し、各行のデータ数を数えます。
各行ごとに、最終列までデータがあるかどうかを判断し、データ数をカウントします。
各行で使用されている最大の列番号を取得します。
タテ方向のセルの処理:同様に、列ごとにデータ数を数え、各列で使用されている最大の行番号を取得します。
CSV ファイルへの変換:CSV ファイルの保存先を指定し、書き込みモードでファイルを開きます。
データを行ごとに読み取り、CSV ファイルに書き込みます。各セルの値は、セミコロンで区切られ、行の最後では改行されます。
処理完了のメッセージ:メッセージボックスで処理が完了したことを通知します。

Excelシートからデータを抽出し、その最大の行番号と列番号を特定し、それをCSVファイルに書き込むためのものです。データの取得と処理が行われ、最終的にCSVファイルに変換されます。
コードは、シンプルながら効率的にデータを処理し、目的の出力を生成するように設計されています。


'改訂版1
Private Const MAX_COL As Long = 100
Private Const MAX_ROW As Long = 100

Sub Cell_count()
    MsgBox ("データが格納されたセルの末尾の" & vbCrLf & "列番号・行番号をお知らせ") 'vbCrLfはメッセージボックスの改行
    '★ヨコ方向のセルについて　末尾データの列の場所を求める
    MsgBox ("※セルを右に向かって見ています")
    MsgBox ("行の使用済みセル最大列番号を求めます")
    '*** データのあるセル範囲取得 開始*** ●
    ' シート名
    Dim csvSh As Worksheet
    Set csvSh = ThisWorkbook.Worksheets("Sheet1")  'シート番号
    
    ' 行ごとのデータ数を格納する配列dataCountを初期化 *** ●●
    Dim dataCount() As Long
    '配列サイズを確定
    ReDim dataCount(1 To MAX_ROW) As Long
    
    ' 配列のループ
    ' 行の数 i
    Dim i As Long
    ' 1行から順にデータ数をカウント
    For i = 1 To MAX_ROW
        ' 各行の最終列を取得
        Dim lastCol As Long
        lastCol = csvSh.Cells(i, csvSh.Columns.Count).End(xlToLeft).Column
        '*** 最終列を1と置く　これがないと先頭行データが空白のとき最終列として判断できない ***
        ' 先頭行データが設定されているかいないか
        If lastCol = 1 And IsEmpty(csvSh.Cells(i, 1).Value) Then '最終列が便宜上1列目 かつ 先頭列データが空白
            dataCount(i) = 0  '行のデータ数0とする
        Else
            ' データ数をカウント
            dataCount(i) = lastCol
        End If
    Next i
    
    '--------------------------------------------------------------------------------
    MsgBox ("データが格納されたセルの末尾の" & vbCrLf & "行番号・列番号をお知らせ") 'vbCrLfはメッセージボックスの改行
    MsgBox ("※セルを下に向かって見ています")
    MsgBox ("列の使用済みセル最大行番号を求めます")
    '*** データのあるセル範囲取得 開始***
    ' 列ごとのデータ数を格納する配列dataCountを再初期化 *** ●●
    '配列サイズを確定
    ReDim dataCount(1 To MAX_COL) As Long
    
    '配列のループ
    ' 列の数 j
    Dim j As Long
    ' 1列から順にデータ数をカウント
    For j = 1 To MAX_COL
        ' 各列の最終行を取得
        Dim lastRow As Long
        lastRow = csvSh.Cells(csvSh.Rows.Count, j).End(xlUp).Row
        '*** 最終行を1と置く　これがないと先頭列データが空白のとき最終行として判断できない ***
        ' 先頭列データが設定されているかいないか
        If lastRow = 1 And IsEmpty(csvSh.Cells(1, j).Value) Then '最終行が便宜上1行目 かつ 先頭行データが空白
            dataCount(j) = 0  '列のデータ数0とする
        Else
            ' データ数をカウント
            dataCount(j) = lastRow
        End If
    Next j
    
    '--------------------------------------------------------------------------------
    MsgBox ("シートCSV変換を開始します")
    '*** 書き込み工程 開始*** ◆◆◆
    Dim csvVal As String 'セル座標のデータをcsvValとして取得
    '使用済み行rowの数の取得　最大値1048576行から上の範囲
    'lastRow = csvSh.Cells(csvSh.Rows.Count, 1).End(xlUp).Row
    '使用済み列columnの数16384の取得 最大値XFD列から左の範囲
    'lastCol = csvSh.Cells(1, csvSh.Columns.Count).End(xlToLeft).column

    ' CSVファイルの保存先を指定
    Dim outputFile As String
    outputFile = "C:\Users\swp\Desktop\Excelマクロ\CSVFile.csv"

    ' 空ファイル番号を取得
    Dim csvNum As Long
    csvNum = FreeFile

    ' CSVファイルを書き込みモードで開く
    Open outputFile For Output As #csvNum
    ' 行方向要素数分ループ
    For i = 1 To MAX_ROW
        ' 列方向要素数分ループ
        For j = 1 To MAX_COL
            ' セルの値を配列から定義
            csvVal = csvSh.Cells(i, j).Value
            ' セルが空でない場合に値を書き込む
            If j = dataCount(i) Then
                ' 最終列の場合、デフォルトで改行コードが付与
                Print #csvNum, csvVal
            ElseIf j <= dataCount(i) And csvVal <> "" Then
                ' 最終列でない場合、かつセルに値がある場合
                Print #csvNum, csvVal & ",";
            End If
        Next j
        ' データのない行にカンマを出力しないための改行
        If i Mod 2 = 0 And dataCount(i) > 0 Then
            Print #csvNum, ""
        End If
    Next i

    ' ファイルを閉じる
    Close #csvNum

    MsgBox ("シートCSV変換 出力完了しました")
    '*** 書き込み工程 終了*** ◆◆◆
    
End Sub

'文章で解説
定数の定義:
MAX_COL および MAX_ROW は、それぞれ行と列の最大数を指定します。このコードでは、それぞれ100と設定されています。
Sub Cell_count():
このサブルーチンは、セルのデータをカウントし、CSVファイルに変換する機能を持っています。
データのカウント:
最初の部分では、行ごとと列ごとのデータ数を数えます。
行ごとのデータ数は配列 dataCount() に格納されます。
CSVファイルへの書き込み:
CSVファイルは、指定されたファイルパスに書き込みモードで開かれます。
行ごとにループが行われ、各行のデータが列ごとに処理されます。
データがある場合、セルの値とカンマがCSVファイルに書き込まれます。
データがない行には、カンマが書き込まれません。また、偶数行の間には空行が挿入されます。
処理の終了:
CSVファイルへの書き込みが完了したら、ファイルが閉じられます。
最後に、処理が完了したことをユーザーに通知するメッセージボックスが表示されます。

このコードは、ExcelのデータをCSV形式に変換するプロセスを実行します。データの存在しない行にはカンマが出力されず、偶数行の間には空行が挿入されるという特徴があります。

'改訂版2
''行ごと、列ごと　結合
''データが入っているセルのうち最も後ろのセルに格納されたデータは、行単位で見たとき何列目まで、列単位で見たとき何行目まで、使われているか。
'' CSVファイル出力時に行ごとの末尾データまではカンマ区切りにする　末尾データ以降でほかの行の末尾データのうち最大のものまでループさせるとき　カンマが出る→この余分なカンマをなくす　※行データ区切りのカンマは残す

'定数
Const MAX_COL As Long = 100  '列　タテ方向のセル　右へ 仮に20
Const MAX_ROW As Long = 100 '行　ヨコ方向のセル　下へ 仮に22

Sub Cell_count()
    MsgBox ("データが格納されたセルの末尾の" & vbCrLf & "列番号・行番号をお知らせ") 'vbCrLfはメッセージボックスの改行
    '★ヨコ方向のセルについて　末尾データの列の場所を求める
    MsgBox ("※セルを右に向かって見ています")
    MsgBox ("行の使用済みセル最大列番号を求めます")
    '*** データのあるセル範囲取得 開始*** ●
    ' シート名
    Dim csvSh As Worksheet
    Set csvSh = ThisWorkbook.Worksheets("Sheet14")  'シート番号

    ' 行ごとのどこまでの列を使っているかを格納する配列dataCountを初期化 *** ●●
    Dim RowCount() As Long
    '配列サイズを確定
    ReDim RowCount(1 To MAX_ROW) As Long

    ' 配列のループ
    ' 行の数 i
    Dim i As Long
    ' 1行から順にデータ数をカウント
    For i = 1 To MAX_ROW
        ' 各行の最終列を取得
        Dim lastCol As Long
        lastCol = csvSh.Cells(i, csvSh.Columns.Count).End(xlToLeft).column
        '*** 最終列を1と置く　これがないと先頭行データが空白のとき最終列として判断できない ***
        ' 先頭行データが設定されているかいないか
        If lastCol = 1 And IsEmpty(csvSh.Cells(i, 1).Value) Then '最終列が便宜上1列目 かつ 先頭列データが空白
            RowCount(i) = 0  '行のデータ数0とする
        Else
            ' データ数をカウント
            RowCount(i) = lastCol
        End If
    Next i

    '上記で作成した配列dataCountの中に格納されているデータの最大値を求める！ *** ●●●
    Dim max_retu As Long
    '「各行の使用済みセル列の末尾列」のセルに格納されている値の配列
    'step1 配列の先頭要素を最大値の初期値とする
    max_retu = RowCount(1)
    'step2 配列ループ
    'For i = 0 To (UBound(dataCount) - LBound(dataCount)) '配列の最大インデックス-配列の最小インデックス+1　これで配列要素数が求まる
    For i = LBound(RowCount) To UBound(RowCount)
        'step3 要素大小比較
        If RowCount(i) > max_retu Then
            'step4 配列の隣接2要素について　左の要素が右の要素より大きければ入れ替えて最大値に代入
            max_retu = RowCount(i)
        End If
    Next i
    MsgBox ("データが入っているセルの使用する列番号最大値は" & vbCrLf & max_retu & " です")  'vbCrLfはメッセージボックスの改行


    '--------------------------------------------------------------------------------
    '★タテ方向のセルについて　末尾データの行の場所を求める
    MsgBox ("つづきまして　列の使用済みセル最大行番号を求めます")
    MsgBox ("※セルを下に向かって見ています")
    '*** データのあるセル範囲取得 開始*** ●
    '行と列それぞれの使用済みセルのMax番号を使いたい　同じdataCount配列を使っていることでMax番号が使えない
    '→別の変数にしてあげる必要がある
    ' 列ごとのどこまでの行を使っているかを格納する配列dataCountを初期化 *** ●●
    ' 列の数 j
    Dim j As Long
    '→別の変数
    Dim ColCount() As Long
    '配列サイズを確定
    ReDim ColCount(1 To MAX_COL) As Long

    '配列のループ
    ' 1列から順にデータ数をカウント
    For j = 1 To MAX_COL
        ' 各列の最終行を取得
        Dim lastRow As Long
        lastRow = csvSh.Cells(csvSh.Rows.Count, j).End(xlUp).Row
        '*** 最終行を1と置く　これがないと先頭列データが空白のとき最終行として判断できない ***
        ' 先頭列データが設定されているかいないか
        If lastRow = 1 And IsEmpty(csvSh.Cells(1, j).Value) Then '最終行が便宜上1行目 かつ 先頭行データが空白
            ColCount(j) = 0  '列のデータ数0とする
        Else
            ' データ数をカウント
            ColCount(j) = lastRow
        End If
    Next j

    '上記で作成した配列dataCountの中に格納されているデータの最大値を求める！ *** ●●●
    Dim max_gyou As Long
    '「各列の使用済みセル行の末尾行」のセルに格納されている値の配列
    'step1 配列の先頭要素を最大値の初期値とする
    max_gyou = ColCount(1)
    'step2 配列ループ
    'For j = 0 To (UBound(dataCount) - LBound(dataCount)) '配列の最大インデックス-配列の最小インデックス+1　これで配列要素数が求まる
    For j = LBound(ColCount) To UBound(ColCount)
        'step3 要素大小比較
        If ColCount(j) > max_gyou Then
            'step4 配列の隣接2要素について　左の要素が右の要素より大きければ入れ替えて最大値に代入
            max_gyou = ColCount(j)
        End If
    Next j
    MsgBox ("データが入っているセルの使用する行番号最大値は" & vbCrLf & max_gyou & " です") 'vbCrLfはメッセージボックスの改行

    '--------------------------------------------------------------------------------
    MsgBox ("シートCSV変換を開始します")
    '*** 書き込み工程 開始*** ◆◆◆
    '使用済み行rowの数の取得　最大値1048576行から上の範囲
    'lastRow = csvSh.Cells(csvSh.Rows.Count, 1).End(xlUp).Row
    '使用済み列columnの数16384の取得 最大値XFD列から左の範囲
    'lastCol = csvSh.Cells(1, csvSh.Columns.Count).End(xlToLeft).column
    '行と列それぞれの使用済みセルのMax番号

     ' CSVファイルの保存先を指定
    Dim outputFile As String
    outputFile = "C:\Users\swp\Desktop\Excelマクロ\CSVFile.csv"

    ' 空ファイル番号を取得
    Dim csvNum As Long
    csvNum = FreeFile

    ' CSVファイルを書き込みモードで開く
    Open outputFile For Output As #csvNum

    ' 行方向要素数分ループ ' 行ごとのどこまでの列を使っているか
    For i = 1 To max_gyou
        ' 列方向要素数分ループ ' 列ごとのどこまでの行を使っているか
        '1行目のときは行ごと列の末尾配列の1番目の要素、2行目のときは2番目の要素を取り出したい
        For j = 1 To RowCount(i)
            'セル座標のデータをcsvValとして取得
            Dim csvVal As String
            ' セルの値を配列から定義
            csvVal = csvSh.Cells(i, j).Value
            ' セルが空でない場合に値を書き込む
            If j = RowCount(i) Then
                ' 最終列の場合、デフォルトで改行コードが付与
                Print #csvNum, csvVal
            Else
                ' 最終列でない場合、コンマ刻みで末尾にセミコロン付与
                Print #csvNum, csvVal & ",";
            End If
        Next j
            ' 行の処理が終了した後に空行を挿入
        Print #csvNum, ""
    Next i

    ' ファイルを閉じる
    Close #csvNum

    MsgBox ("シートCSV変換 出力完了しました")
    '*** 書き込み工程 終了*** ◆◆◆

End Sub

'出力パターン例
'1)1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,,,,,20 →データの合間であれば出力させる

'2),,,,,,,,,,,,,,,,,,,→出力させない

'3)1,2,3,4,5,6,7,8,9,10,11,,,,,,,,, →行末データ11以降出力させない

'文章で解説
このマクロは、与えられたシートのデータから行ごとと列ごとの末尾データの位置を見つけ、CSV形式のファイルに変換するものです。
行ごとの末尾データの列位置を求める部分：
まず、各行の末尾列の位置を見つけます。
セルにデータがない場合はその行のデータ数を0とします。
各行の末尾列の位置を見つけた後、最大の末尾列の位置を取得します。

列ごとの末尾データの行位置を求める部分：
各列の末尾行の位置を見つけます。
セルにデータがない場合はその列のデータ数を0とします。
各列の末尾行の位置を見つけた後、最大の末尾行の位置を取得します。

CSVファイルへの変換部分：
各行の末尾データまでをカンマ区切りでCSVファイルに書き込みます。
行の最後には改行を挿入します。
余分なカンマは行末のデータ以降にない限り除去されます。
最後に、CSVファイルに変換されたデータは、指定されたパスに保存されます。

このマクロは、データが入っているセルの範囲を探索し、行と列ごとの末尾データの位置を特定しています。そして、それらの情報を元にCSV形式のファイルに変換しています。

'改訂版3
'行ごと、列ごと　結合
'データが入っているセルのうち最も後ろのセルに格納されたデータは、行単位で見たとき何列目まで、列単位で見たとき何行目まで、使われているか。
'OKな部分：改行はされている、データの区切りのカンマは正しく出ている、行末のデータの後ろのカンマは出ない、データのない空行部分は空行で出力（カンマを出さない）
'→毎回改行による空行が行われている　余分な改行をなくすには？

'定数
Const MAX_COL As Long = 100  '列　タテ方向のセル　右へ 仮に20
Const MAX_ROW As Long = 100 '行　ヨコ方向のセル　下へ 仮に22

Sub Cell_count()
    MsgBox ("データが格納されたセルの末尾の" & vbCrLf & "列番号・行番号をお知らせ") 'vbCrLfはメッセージボックスの改行
    '★ヨコ方向のセルについて　末尾データの列の場所を求める
    MsgBox ("※セルを右に向かって見ています")
    MsgBox ("行の使用済みセル最大列番号を求めます")
    '*** データのあるセル範囲取得 開始*** ●
    ' シート名
    Dim csvSh As Worksheet
    Set csvSh = ThisWorkbook.Worksheets("Sheet14")  'シート番号

    ' 行ごとのどこまでの列を使っているかを格納する配列dataCountを初期化 *** ●●
    Dim RowCount() As Long
    '配列サイズを確定
    ReDim RowCount(1 To MAX_ROW) As Long

    ' 配列のループ
    ' 行の数 i
    Dim i As Long
    ' 1行から順にデータ数をカウント
    For i = 1 To MAX_ROW
        ' 各行の最終列を取得
        Dim lastCol As Long
        lastCol = csvSh.Cells(i, csvSh.Columns.Count).End(xlToLeft).column
        '*** 最終列を1と置く　これがないと先頭行データが空白のとき最終列として判断できない ***
        ' 先頭行データが設定されているかいないか
        If lastCol = 1 And IsEmpty(csvSh.Cells(i, 1).Value) Then '最終列が便宜上1列目 かつ 先頭列データが空白
            RowCount(i) = 0  '行のデータ数0とする
        Else
            ' データ数をカウント
            RowCount(i) = lastCol
        End If
    Next i

    '上記で作成した配列dataCountの中に格納されているデータの最大値を求める！ *** ●●●
    Dim max_retu As Long
    '「各行の使用済みセル列の末尾列」のセルに格納されている値の配列
    'step1 配列の先頭要素を最大値の初期値とする
    max_retu = RowCount(1)
    'step2 配列ループ
    'For i = 0 To (UBound(dataCount) - LBound(dataCount)) '配列の最大インデックス-配列の最小インデックス+1　これで配列要素数が求まる
    For i = LBound(RowCount) To UBound(RowCount)
        'step3 要素大小比較
        If RowCount(i) > max_retu Then
            'step4 配列の隣接2要素について　左の要素が右の要素より大きければ入れ替えて最大値に代入
            max_retu = RowCount(i)
        End If
    Next i
    MsgBox ("データが入っているセルの使用する列番号最大値は" & vbCrLf & max_retu & " です")  'vbCrLfはメッセージボックスの改行


    '--------------------------------------------------------------------------------
    '★タテ方向のセルについて　末尾データの行の場所を求める
    MsgBox ("つづきまして　列の使用済みセル最大行番号を求めます")
    MsgBox ("※セルを下に向かって見ています")
    '*** データのあるセル範囲取得 開始*** ●
    '行と列それぞれの使用済みセルのMax番号を使いたい　同じdataCount配列を使っていることでMax番号が使えない
    '→別の変数にしてあげる必要がある
    ' 列ごとのどこまでの行を使っているかを格納する配列dataCountを初期化 *** ●●
    ' 列の数 j
    Dim j As Long
    '→別の変数
    Dim ColCount() As Long
    '配列サイズを確定
    ReDim ColCount(1 To MAX_COL) As Long

    '配列のループ
    ' 1列から順にデータ数をカウント
    For j = 1 To MAX_COL
        ' 各列の最終行を取得
        Dim lastRow As Long
        lastRow = csvSh.Cells(csvSh.Rows.Count, j).End(xlUp).Row
        '*** 最終行を1と置く　これがないと先頭列データが空白のとき最終行として判断できない ***
        ' 先頭列データが設定されているかいないか
        If lastRow = 1 And IsEmpty(csvSh.Cells(1, j).Value) Then '最終行が便宜上1行目 かつ 先頭行データが空白
            ColCount(j) = 0  '列のデータ数0とする
        Else
            ' データ数をカウント
            ColCount(j) = lastRow
        End If
    Next j

    '上記で作成した配列dataCountの中に格納されているデータの最大値を求める！ *** ●●●
    Dim max_gyou As Long
    '「各列の使用済みセル行の末尾行」のセルに格納されている値の配列
    'step1 配列の先頭要素を最大値の初期値とする
    max_gyou = ColCount(1)
    'step2 配列ループ
    'For j = 0 To (UBound(dataCount) - LBound(dataCount)) '配列の最大インデックス-配列の最小インデックス+1　これで配列要素数が求まる
    For j = LBound(ColCount) To UBound(ColCount)
        'step3 要素大小比較
        If ColCount(j) > max_gyou Then
            'step4 配列の隣接2要素について　左の要素が右の要素より大きければ入れ替えて最大値に代入
            max_gyou = ColCount(j)
        End If
    Next j
    MsgBox ("データが入っているセルの使用する行番号最大値は" & vbCrLf & max_gyou & " です") 'vbCrLfはメッセージボックスの改行

    '--------------------------------------------------------------------------------
    MsgBox ("シートCSV変換を開始します")
    '*** 書き込み工程 開始*** ◆◆◆
    '使用済み行rowの数の取得　最大値1048576行から上の範囲
    'lastRow = csvSh.Cells(csvSh.Rows.Count, 1).End(xlUp).Row
    '使用済み列columnの数16384の取得 最大値XFD列から左の範囲
    'lastCol = csvSh.Cells(1, csvSh.Columns.Count).End(xlToLeft).column
    '行と列それぞれの使用済みセルのMax番号

     ' CSVファイルの保存先を指定
    Dim outputFile As String
    outputFile = "C:\Users\swp\Desktop\Excelマクロ\CSVFile.csv"

    ' 空ファイル番号を取得
    Dim csvNum As Long
    csvNum = FreeFile

    ' CSVファイルを書き込みモードで開く
    Open outputFile For Output As #csvNum

    ' 行方向要素数分ループ ' 行ごとのどこまでの列を使っているか
    For i = 1 To max_gyou
        ' 列方向要素数分ループ ' 列ごとのどこまでの行を使っているか
        '1行目のときは行ごと列の末尾配列の1番目の要素、2行目のときは2番目の要素を取り出したい
        'データのない行は空行として出力させたい
        For j = 1 To RowCount(i)
            'セル座標のデータをcsvValとして取得
            Dim csvVal As String
            ' セルの値を配列から定義
            csvVal = csvSh.Cells(i, j).Value
            ' セルが空でない場合に値を書き込む
            If j = RowCount(i) Then
                ' 最終列の場合、デフォルトで改行コードが付与
                Print #csvNum, csvVal
            Else
                ' 最終列でない場合、コンマ刻みで末尾にセミコロン付与
                Print #csvNum, csvVal & ",";
            End If
                ' データのない空行かどうかの判定（空行を上に詰めずに出力する）
                Selection.SpecialCells(xlCellTypeBlanks).Select
                Selection.EntireRow.Hidden = False '該当する行非表示をFalseで否定にする
                Print #csvNum, ""
        Next j
    Next i

    ' ファイルを閉じる
    Close #csvNum

    MsgBox ("シートCSV変換 出力完了しました")
    '*** 書き込み工程 終了*** ◆◆◆

End Sub
'出力パターン例
'1)1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,,,,,20 →データの合間であれば出力させる

'2),,,,,,,,,,,,,,,,,,,→データがなければ区切りカンマ出力させない（空行として出力させる）

'3)1,2,3,4,5,6,7,8,9,10,11,,,,,,,,, →行末データ11以降出力させない
’文章で解説
定数の定義:
MAX_COL および MAX_ROW は、それぞれ列と行の最大数を定義しています。

Sub Cell_count():
このサブルーチンは、データが格納されたセルの末尾の列番号と行番号を求めます。

ヨコ方向のセルについて（列の場所を求める）:
シートを参照して、各行ごとの最終列を探し出し、それを配列 RowCount() に格納します。
RowCount() 配列の中で最大の値を見つけて、データが入っているセルの使用する列番号の最大値を求めます。

タテ方向のセルについて（行の場所を求める）:
同様の手順で、各列ごとの最終行を探し出し、それを配列 ColCount() に格納します。
ColCount() 配列の中で最大の値を見つけて、データが入っているセルの使用する行番号の最大値を求めます。

シートCSV変換:
CSVファイルへの書き込み処理が行われます。
ネストされたループで、各行と各列に対してデータを取得し、CSVファイルに書き込みます。
データがない行に対しては、空行として出力されます。

出力パターン例:
出力は、データの間にカンマが入り、データがない場合にはカンマは出力されません。
また、データの入った行と空行が区別されて出力されます。

'改訂版4
'行ごと、列ごと　結合
'データが入っているセルのうち最も後ろのセルに格納されたデータは、行単位で見たとき何列目まで、列単位で見たとき何行目まで、使われているか。
'OKな部分：改行はされている、データの区切りのカンマは正しく出ている、行末のデータの後ろのカンマは出ない、データのない空行部分は空行で出力（カンマを出さない）
'現時点で最善のコード　ただし最終行が表示されていない問題あり

'定数
Const MAX_COL As Long = 100  '列　タテ方向のセル　右へ 仮に20
Const MAX_ROW As Long = 100 '行　ヨコ方向のセル　下へ 仮に22

Sub Cell_count()
    MsgBox ("データが格納されたセルの末尾の" & vbCrLf & "列番号・行番号をお知らせ") 'vbCrLfはメッセージボックスの改行
    '★ヨコ方向のセルについて　末尾データの列の場所を求める
    MsgBox ("※セルを右に向かって見ています")
    MsgBox ("行の使用済みセル最大列番号を求めます")
    '*** データのあるセル範囲取得 開始*** ●
    ' シート名
    Dim csvSh As Worksheet
    Set csvSh = ThisWorkbook.Worksheets("Sheet14")  'シート番号

    ' 行ごとのどこまでの列を使っているかを格納する配列dataCountを初期化 *** ●●
    Dim RowCount() As Long
    '配列サイズを確定
    ReDim RowCount(1 To MAX_ROW) As Long

    ' 配列のループ
    ' 行の数 i
    Dim i As Long
    ' 1行から順にデータ数をカウント
    For i = 1 To MAX_ROW
        ' 各行の最終列を取得
        Dim lastCol As Long
        lastCol = csvSh.Cells(i, csvSh.Columns.Count).End(xlToLeft).column
        '*** 最終列を1と置く　これがないと先頭行データが空白のとき最終列として判断できない ***
        ' 先頭行データが設定されているかいないか
        If lastCol = 1 And IsEmpty(csvSh.Cells(i, 1).Value) Then '最終列が便宜上1列目 かつ 先頭列データが空白
            RowCount(i) = 0  '行のデータ数0とする
        Else
            ' データ数をカウント
            RowCount(i) = lastCol
        End If
    Next i

    '上記で作成した配列dataCountの中に格納されているデータの最大値を求める！ *** ●●●
    Dim max_retu As Long
    '「各行の使用済みセル列の末尾列」のセルに格納されている値の配列
    'step1 配列の先頭要素を最大値の初期値とする
    max_retu = RowCount(1)
    'step2 配列ループ
    'For i = 0 To (UBound(dataCount) - LBound(dataCount)) '配列の最大インデックス-配列の最小インデックス+1　これで配列要素数が求まる
    For i = LBound(RowCount) To UBound(RowCount)
        'step3 要素大小比較
        If RowCount(i) > max_retu Then
            'step4 配列の隣接2要素について　左の要素が右の要素より大きければ入れ替えて最大値に代入
            max_retu = RowCount(i)
        End If
    Next i
    MsgBox ("データが入っているセルの使用する列番号最大値は" & vbCrLf & max_retu & " です")  'vbCrLfはメッセージボックスの改行


    '--------------------------------------------------------------------------------
    '★タテ方向のセルについて　末尾データの行の場所を求める
    MsgBox ("つづきまして　列の使用済みセル最大行番号を求めます")
    MsgBox ("※セルを下に向かって見ています")
    '*** データのあるセル範囲取得 開始*** ●
    '行と列それぞれの使用済みセルのMax番号を使いたい　同じdataCount配列を使っていることでMax番号が使えない
    '→別の変数にしてあげる必要がある
    ' 列ごとのどこまでの行を使っているかを格納する配列dataCountを初期化 *** ●●
    ' 列の数 j
    Dim j As Long
    '→別の変数
    Dim ColCount() As Long
    '配列サイズを確定
    ReDim ColCount(1 To MAX_COL) As Long

    '配列のループ
    ' 1列から順にデータ数をカウント
    For j = 1 To MAX_COL
        ' 各列の最終行を取得
        Dim lastRow As Long
        lastRow = csvSh.Cells(csvSh.Rows.Count, j).End(xlUp).Row
        '*** 最終行を1と置く　これがないと先頭列データが空白のとき最終行として判断できない ***
        ' 先頭列データが設定されているかいないか
        If lastRow = 1 And IsEmpty(csvSh.Cells(1, j).Value) Then '最終行が便宜上1行目 かつ 先頭行データが空白
            ColCount(j) = 0  '列のデータ数0とする
        Else
            ' データ数をカウント
            ColCount(j) = lastRow
        End If
    Next j

    '上記で作成した配列dataCountの中に格納されているデータの最大値を求める！ *** ●●●
    Dim max_gyou As Long
    '「各列の使用済みセル行の末尾行」のセルに格納されている値の配列
    'step1 配列の先頭要素を最大値の初期値とする
    max_gyou = ColCount(1)
    'step2 配列ループ
    'For j = 0 To (UBound(dataCount) - LBound(dataCount)) '配列の最大インデックス-配列の最小インデックス+1　これで配列要素数が求まる
    For j = LBound(ColCount) To UBound(ColCount)
        'step3 要素大小比較
        If ColCount(j) > max_gyou Then
            'step4 配列の隣接2要素について　左の要素が右の要素より大きければ入れ替えて最大値に代入
            max_gyou = ColCount(j)
        End If
    Next j
    MsgBox ("データが入っているセルの使用する行番号最大値は" & vbCrLf & max_gyou & " です") 'vbCrLfはメッセージボックスの改行

    '--------------------------------------------------------------------------------
    MsgBox ("シートCSV変換を開始します")
    '*** 書き込み工程 開始*** ◆◆◆
    '使用済み行rowの数の取得　最大値1048576行から上の範囲
    'lastRow = csvSh.Cells(csvSh.Rows.Count, 1).End(xlUp).Row
    '使用済み列columnの数16384の取得 最大値XFD列から左の範囲
    'lastCol = csvSh.Cells(1, csvSh.Columns.Count).End(xlToLeft).column
    '行と列それぞれの使用済みセルのMax番号

     ' CSVファイルの保存先を指定
    Dim outputFile As String
    outputFile = "C:\Users\swp\Desktop\Excelマクロ\CSVFile.csv"

    ' 空ファイル番号を取得
    Dim csvNum As Long
    csvNum = FreeFile

    ' CSVファイルを書き込みモードで開く
    Open outputFile For Output As #csvNum

    ' 行方向のデータを処理
    lastRow = csvSh.Cells(csvSh.Rows.Count, 1).End(xlUp).Row

    Dim hasData As Boolean
    For i = 1 To lastRow
        lastCol = csvSh.Cells(i, csvSh.Columns.Count).End(xlToLeft).column

        ' 行のデータ出力
        Dim rowData As String
        rowData = ""
        For j = 1 To MAX_COL
            If j <= lastCol Then
                If j > 1 Then
                    rowData = rowData & ","
                End If
                rowData = rowData & csvSh.Cells(i, j).Value
                hasData = True
            Else
                rowData = rowData & ""
            End If
        Next j
        If hasData Then
            Print #csvNum, rowData
            hasData = False
        End If
    Next i

    ' ファイルを閉じる
    Close #csvNum

    MsgBox ("シートCSV変換 出力完了しました")
    '*** 書き込み工程 終了*** ◆◆◆

End Sub

'出力パターン例
'1)1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,,,,,20 →データの合間であれば出力させる

'2),,,,,,,,,,,,,,,,,,,→データがなければ区切りカンマ出力させない（空行として出力させる）

'3)1,2,3,4,5,6,7,8,9,10,11,,,,,,,,, →行末データ11以降出力させない
'文章で解説
定数の定義:
MAX_COL および MAX_ROW は、それぞれ列と行の最大数を定義しています。
Sub Cell_count():
このサブルーチンは、データが格納されたセルの末尾の列番号と行番号を求めます。
ヨコ方向のセルについて（列の場所を求める）:
各行ごとに最終列を探し、それを配列 RowCount() に格納します。
配列 RowCount() の中で最大の値を見つけて、データが入っているセルの使用する列番号の最大値を求めます。
タテ方向のセルについて（行の場所を求める）:
各列ごとに最終行を探し、それを配列 ColCount() に格納します。
配列 ColCount() の中で最大の値を見つけて、データが入っているセルの使用する行番号の最大値を求めます。
シートCSV変換:
CSVファイルへの書き込み処理が行われます。
ループを使用して、各行のデータを取得し、CSVファイルに書き込みます。
データがない行に対しては、空行として出力されます。
出力パターン例:
出力は、データの間にカンマが入り、データがない場合にはカンマは出力されません。
また、データの入った行と空行が区別されて出力されます。
※最終行の1つ上の行までしか出力しません

'改訂版4
'データが入っているセルのうち最も後ろのセルに格納されたデータは、行単位で見たとき何列目まで、列単位で見たとき何行目まで、使われているか。
'CSVファイル出力時に行ごとの末尾データまではカンマ区切りにする　末尾データ以降カンマを出さない
'データのない空行はそのまま空行出力（データ区切りのカンマを出さない）
'空行を上に詰めることもしない

'変数一覧
'Const MAX_COL As Long 　定数　データの検索範囲タテ方向　列の数
'Const MAX_ROW As Long   定数　データの検索範囲ヨコ方向　行の数
'csvSh 今回のワークシート
'i 行のインデックス
'RowCount()行ごとのどこまでの列を使っているかを格納する配列
'lastCol 行を見たときに何列目までデータが入っているか
'max_retu データが入っているセルの使用する列番号最大値
'j 列のインデックス
'ColCount()列ごとのどこまでの行を使っているかを格納する配列
'lastRow 列を見たときに何行目までデータが入っているか
'max_gyou データが入っているセルの使用する行番号最大値
'outputFile csvファイルの保存先
'csvVal i行j列のセルの値　csvSh.Cells(i, j).Value


'定数
Const MAX_COL As Long = 100  '列　データの検索範囲タテ方向　右へ
Const MAX_ROW As Long = 100 '行　データの検索範囲ヨコ方向　下へ

Sub Cell_Count()
    ' データが格納されたセルの末尾の列番号・行番号をお知らせ
    MsgBox ("データが格納されたセルの末尾の" & vbCrLf & "列番号・行番号をお知らせ") 'vbCrLfはメッセージボックスの改行
    
    ' ヨコ方向のセルについて　末尾データの列の場所を求める
    MsgBox ("※セルを右に向かって見ています")
    MsgBox ("行の使用済みセル最大列番号を求めます")
    
    ' データのあるセル範囲取得
    Dim csvSh As Worksheet
    Set csvSh = ThisWorkbook.Worksheets("Sheet14")
       
    ' 行ごとのどこまでの列を使っているかを格納する配列RowCountを初期化
    Dim RowCount() As Long
    ReDim RowCount(1 To MAX_ROW) As Long
    
    ' 行の数 i
    Dim i As Long
    For i = 1 To MAX_ROW
        Dim lastCol As Long
        lastCol = csvSh.Cells(i, csvSh.Columns.Count).End(xlToLeft).Column
        If lastCol = 1 And IsEmpty(csvSh.Cells(i, 1).Value) Then
            RowCount(i) = 0
        Else
            RowCount(i) = lastCol
        End If
    Next i
    
    ' データが入っているセルの使用する列番号最大値を求める
    Dim max_retu As Long
    max_retu = WorksheetFunction.max(RowCount)
    MsgBox ("データが入っているセルの使用する列番号最大値は" & vbCrLf & max_retu & " です")  'vbCrLfはメッセージボックスの改行
    
    '--------------------------------------------------------------------------------
    ' タテ方向のセルについて　末尾データの行の場所を求める
    MsgBox ("つづきまして　列の使用済みセル最大行番号を求めます")
    MsgBox ("※セルを下に向かって見ています")
    
    ' 列ごとのどこまでの行を使っているかを格納する配列ColCountを初期化
    Dim ColCount() As Long
    ReDim ColCount(1 To MAX_COL) As Long
    
    ' 列の数 j
    Dim j As Long
    For j = 1 To MAX_COL
        Dim lastRow As Long
        lastRow = csvSh.Cells(csvSh.Rows.Count, j).End(xlUp).Row
        If lastRow = 1 And IsEmpty(csvSh.Cells(1, j).Value) Then
            ColCount(j) = 0
        Else
            ColCount(j) = lastRow
        End If
    Next j
    
    ' データが入っているセルの使用する行番号最大値を求める
    Dim max_gyou As Long
    max_gyou = WorksheetFunction.max(ColCount)
    MsgBox ("データが入っているセルの使用する行番号最大値は" & vbCrLf & max_gyou & " です") 'vbCrLfはメッセージボックスの改行
    
    '--------------------------------------------------------------------------------
    MsgBox ("シートCSV変換を開始します")
    
    ' CSVファイルの保存先を指定
    Dim outputFile As String
    outputFile = "C:\Users\swp\Desktop\Excelマクロ\CSVFile.csv"
    
        ' 空ファイル番号を取得
    Dim csvNum As Long
    csvNum = FreeFile
    
    ' CSVファイルを書き込みモードで開く
    Open outputFile For Output As #csvNum
    
    ' 行方向要素数分ループ ' 行ごとのどこまでの列を使っているか
    For i = 1 To max_gyou
        ' 列方向要素数分ループ ' 列ごとのどこまでの行を使っているか
        '1行目のときは行ごと列の末尾配列の1番目の要素、2行目のときは2番目の要素を取り出したい
        For j = 1 To RowCount(i)
            'セル座標のデータをcsvValとして取得
            Dim csvVal As String
            ' セルの値を定義
            csvVal = csvSh.Cells(i, j).Value
            ' セルが空でない場合に値を書き込む
            If j = RowCount(i) Then
                ' 最終列の場合、デフォルトで改行コードが付与
                Print #csvNum, csvVal
            Else
                ' 最終列でない場合、コンマ刻みで末尾にセミコロン付与
                Print #csvNum, csvVal & ",";
            End If
        Next j
        
        '********** 空行の挿入
        ' 現在の行が最後の行でなく、次の行にデータがない場合にのみ空白行を挿入
        '今の行番号がデータが入っているセルの使用する行番号最大値より小さい間
        If i < max_gyou Then
            'シートの次の行の空白以外のセルの個数（countA関数）が0・・・つまり全部空セルの行
            If WorksheetFunction.CountA(csvSh.Rows(i + 1)) = 0 Then
                'ファイル出力　csvValの代わりに空白出力
                Print #csvNum, ""
            End If
        End If
        '**********
    Next i
    
    ' ファイルを閉じる
    Close #csvNum
    
    MsgBox ("シートCSV変換 出力完了しました")
    '*** 書き込み工程 終了*** ◆◆◆

End Sub
'文章で解説
'行ごとのデータの終端位置を格納する配列 RowCount() を初期化します。これにより、各行におけるデータの最終列が保持されます。
'行ごとにデータの終端位置を取得し、その最大値を max_retu に代入します。これにより、データが入っているセルの使用する列番号の最大値が取得されます。
'列ごとのデータの終端位置を格納する配列 ColCount() を初期化します。これにより、各列におけるデータの最終行が保持されます。
'列ごとにデータの終端位置を取得し、その最大値を max_gyou に代入します。これにより、データが入っているセルの使用する行番号の最大値が取得されます。
'ファイルの保存先を指定し､CSVファイルを書き込みモードで開きます｡これにより､指定されたファイルパスにCSVファイルが作成され､書き込み用に開かれます｡
'行ごとに､列ごとのデータをCSVファイルに書き込みます｡各セルの値をコンマで区切って書き込みます｡これにより､ワークシート上のデータがCSV形式でファイルに書き込まれます｡
'現在の行が最後の行でなく､次の行にデータがない場合にのみ空白行を挿入します｡これにより､データのない行だけが空行として挿入されます｡


