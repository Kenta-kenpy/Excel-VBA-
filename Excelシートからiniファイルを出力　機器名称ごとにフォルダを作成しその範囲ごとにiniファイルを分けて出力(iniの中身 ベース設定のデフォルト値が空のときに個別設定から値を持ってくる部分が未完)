'ベース設定のG列デフォルト値が空欄の場合、個別設定のH列設定値を代入する。(未解決) iniの中身
'デスクトップの出力だが、iniフォルダを作成しその中に機器名称ごとのフォルダを作りiniファイルを出力させるものとする。→解決

Const START_ROW As Long = 6 ' データ全体の開始行
Const END_ROW As Long = 20000 ' データ全体の終了行
Const CHARSET_UTF8 As String = "UTF-8" ' UTF-8文字セットの定数
Const LINE_SEPARATOR_CRLF As Long = -1 ' 改行コードの定数

Sub ArtINI()
    Dim lastRow As Long ' 最終行の変数
    Dim startRow As Long ' 機器名称の開始行
    Dim endRow As Long ' 機器名称の終了行
    Dim folderPath As String ' フォルダパスの変数
    Dim currentEquipment As String ' 現在の機器名称の変数
    Dim sanitizedEquipment As String ' (文字列の規則)サニタイズされた機器名称の変数
    Dim rng As Range ' 範囲オブジェクト
    Dim cell As Range ' セルオブジェクト
    Dim dict As Object ' Dictionaryオブジェクト
    Dim filePath As String ' ファイルパスの変数
    Dim iniFile As String ' iniファイルの名前
    Dim fs As Object ' FileSystemオブジェクト
    Dim ts As Object ' TextStreamオブジェクト

    ' シートの設定
    Dim WS As Worksheet ' ベース設定シート用のワークシートオブジェクト
    Set WS = ThisWorkbook.Worksheets("ベース設定") ' ベース設定シートを設定
    Dim Sh As Worksheet ' 個別設定シート用のワークシートオブジェクト
    Set Sh = ThisWorkbook.Worksheets("個別設定") ' 個別設定シートを設定
    
    ' FileSystemObjectとDictionaryオブジェクトの作成
    Set fs = CreateObject("Scripting.FileSystemObject") ' FileSystemObjectを作成
    Set dict = CreateObject("Scripting.Dictionary") ' Dictionaryオブジェクトを作成

    ' 機器名称の開始行と終了行、機器名称の初期値を指定
    startRow = 6 ' 開始行を設定
    endRow = 196 ' 終了行を設定
    currentEquipment = "メイン卓A(画A/C)" ' 初期の機器名称を設定
    
    Do While startRow <= 3061 ' 指定行までループ
        ' 機器名称のスラッシュを全角スラッシュに置換　※サニタイズ
        sanitizedEquipment = Replace(currentEquipment, "/", "／")
        
        'デスクトップにiniフォルダを作りその中に機器名称ごとのフォルダを出力　更に各フォルダにiniファイルを作成
        folderPath = "C:\Users\swp\Desktop\ini\" & sanitizedEquipment ' フォルダパスを設定
        CreateFolderRecursively folderPath ' フォルダを作成
        
        ' 個別設定シートの機器名称ごとの開始セルと終了セルを取得
        Set rng = Sh.Range("B" & startRow & ":B" & endRow) ' 範囲を設定
        
        ' 各行を処理
        For Each cell In rng ' 範囲内の各セルを処理
            Dim classification As String ' 分類の変数
            Dim section As Variant ' セクションの変数
            Dim key As String ' キーの変数
            Dim value As String ' 値の変数
            Dim baseValue As String ' ベース値の変数
            Dim outputValue As String ' 出力値の変数
            
            classification = Sh.Cells(cell.row, 3).value ' C列の値を取得
            section = Sh.Cells(cell.row, 5).value ' E列の値を取得
            key = Sh.Cells(cell.row, 6).value ' F列の値を取得
            value = Sh.Cells(cell.row, 8).value ' H列の値を取得
            
            '-- < ベース設定シートのデフォルト値が空欄の場合個別設定シートの設定値を代入 > --
            ' 設定値が空の場合はベース設定シートから取得
            If value = "" Then ' 値が空の場合
                On Error Resume Next ' エラー時に次の行に移動
                baseValue = Application.VLookup(classification, WS.Range("B:G"), 6, False) ' VLOOKUPでベース値を取得
                On Error GoTo 0 ' エラーハンドリングを解除
                
                If IsError(baseValue) Or baseValue = "" Then ' エラーまたは空の場合
                    ' ベース設定シートのG列が空欄の場合、個別設定シートのH列の値を使用
                    baseValue = Sh.Cells(cell.row, 8).value ' 個別設定シートのH列の値を取得
                End If
                
                outputValue = baseValue ' 出力値を設定
            Else
                outputValue = value ' 値がある場合はそのまま出力値を設定
            End If
            
            ' iniファイルの内容を作成
            If Not dict.Exists(section) Then ' セクションが存在しない場合
                dict(section) = "[" & section & "]" & vbCrLf ' セクションを作成
            End If
            dict(section) = dict(section) & key & " = " & outputValue & vbCrLf ' キーと値を追加
        Next cell

        ' iniファイルを作成
        filePath = folderPath & "\config.ini" ' ファイルパスを設定
        Set ts = fs.CreateTextFile(filePath, True) ' テキストファイルを作成
        For Each section In dict.Keys ' 各セクションを処理
            ts.WriteLine dict(section) ' セクションを書き込む
        Next section
        ts.Close ' ファイルを閉じる
        
        ' 次の範囲に移動
        startRow = endRow + 1
        endRow = endRow + 191
        currentEquipment = GetNextEquipmentName(startRow) ' 次の機器名称を取得する関数を呼び出す
        dict.RemoveAll ' Dictionaryをクリア
    Loop ' ループの終了
    
    Dim outputPath As String
    outputPath = "C:\Users\swp\Desktop\ini"
    
    CreateObject("WScript.Shell").Run outputPath   '保存したiniフォルダを開く
End Sub

' 行の範囲から機器名称を取得する関数
Function GetNextEquipmentName(startRow As Long) As String
    If startRow >= 6 And startRow <= 196 Then
        GetNextEquipmentName = "メイン卓A(画A)"
    ElseIf startRow >= 197 And startRow <= 387 Then
        GetNextEquipmentName = "メイン卓A(画B)"
    ElseIf startRow >= 388 And startRow <= 578 Then
        GetNextEquipmentName = "メイン卓A(画D)"
    ElseIf startRow >= 579 And startRow <= 769 Then
        GetNextEquipmentName = "メイン卓B(画A/C)"
    ElseIf startRow >= 770 And startRow <= 960 Then
        GetNextEquipmentName = "メイン卓B(画B)"
    ElseIf startRow >= 961 And startRow <= 1151 Then
        GetNextEquipmentName = "メイン卓B(画D)"
    ElseIf startRow >= 1152 And startRow <= 1342 Then
        GetNextEquipmentName = "メイン卓C(画A/C)"
    ElseIf startRow >= 1343 And startRow <= 1533 Then
        GetNextEquipmentName = "メイン卓C(画B)"
    ElseIf startRow >= 1534 And startRow <= 1724 Then
        GetNextEquipmentName = "メイン卓C(画D)"
    ElseIf startRow >= 1725 And startRow <= 1915 Then
        GetNextEquipmentName = "メイン卓D(画A/C)"
    ElseIf startRow >= 1916 And startRow <= 2106 Then
        GetNextEquipmentName = "メイン卓D(画B)"
    ElseIf startRow >= 2107 And startRow <= 2297 Then
        GetNextEquipmentName = "メイン卓D(画D)"
    ElseIf startRow >= 2298 And startRow <= 2488 Then
        GetNextEquipmentName = "メイン卓E(画A/C)"
    ElseIf startRow >= 2489 And startRow <= 2679 Then
        GetNextEquipmentName = "メイン卓E(画B)"
    ElseIf startRow >= 2680 And startRow <= 2870 Then
        GetNextEquipmentName = "メイン卓E(画D)"
    ElseIf startRow >= 2871 And startRow <= 3061 Then
        GetNextEquipmentName = "メイン卓WN1(画A/C)"
    End If
End Function

' フォルダ作成関数
Sub CreateFolderRecursively(folderPath As String)
    Dim fs As Object ' FileSystemObject
    Dim parentFolder As String ' 親フォルダ(ini)のパス
    
    Set fs = CreateObject("Scripting.FileSystemObject") ' FileSystemObjectを作成
    If Not fs.FolderExists(folderPath) Then ' フォルダが存在しない場合
        parentFolder = fs.GetParentFolderName(folderPath) ' 親フォルダiniのパスを取得
        If Not fs.FolderExists(parentFolder) Then ' 親フォルダiniが存在しない場合
            CreateFolderRecursively parentFolder ' 親フォルダiniを再帰的に作成
        End If
        fs.CreateFolder folderPath ' 親フォルダiniの中にフォルダを作成
    End If
End Sub
